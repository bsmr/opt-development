#!/bin/bash

SCRIPT_NAME=$(basename $0)
SCRIPT_PATH=$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)

MYGITREPOS="${HOME}/.mygitrepositorylist"

# --- display usage information ---------------------------------------
action_usage() {
cat <<EOF
usage: ${SCRIPT_NAME} [ setup FORK UPSTREAM | update | edit | help ]
EOF
}

# --- display extended usage information ------------------------------
action_help() {
cat <<EOF
To be done...
EOF
}

# --- check my git repositories for updates from upstream
process_repro_update() {
local REPO="$1"

echo "********************************************************"
echo "*** $REPO"

cd "${REPO}"

local BRANCH=$(git branch -a | grep '^*' | awk '{ print $2 }')
local RU=$(git remote | grep '^upstream')
local RO=$(git remote | grep '^origin')

if [ -z "${BRANCH}" ]
then
	echo "Error: failed to get current branch!" >&2
	exit 1
fi
if [ -z "${RU}" ]
then
	echo "Error: no remote \"upstream\"!" >&2
	exit 1
fi
if [ -z "${RO}" ]
then
	echo "Error: no remote \"origin\"!" >&2
	exit 1
fi

# update from origin
echo "*** --- git pull origin --------------------------------"
git pull "${RO}" "${BRANCH}"
if [ "$?" != "0" ]
then
	echo "Error: failed to pull branch \"${BRANCH}\" from remote \"${RO}\"!" >&2
	exit 1
fi

# fetch from upstream
echo "*** --- git fetch upstream -----------------------------"
git fetch "${RU}"
if [ "$?" != "0" ]
then
    echo "Error: failed to fetch (ALL) from remote \"${RU}\"!" >&2
	exit 1
fi
git fetch "${RU}" --tags

# update from upstream
echo "*** --- git pull upstream ------------------------------"
git pull "${RU}" "${BRANCH}"
if [ "$?" != "0" ]
then
	echo "Error: failed to pull branch \"${BRANCH}\" from remote \"${RU}\"!" >&2
	exit 1
fi

# push to origin
echo "*** --- git push origin --------------------------------"
git push "${RO}" "${BRANCH}"
if [ "$?" != "0" ]
then
	echo "Error: failed to puh branch \"${BRANCH}\" to remote \"${RU}\"!" >&2
	exit 1
fi
git push "${RO}" --tags
}

action_edit() {
editor "${MYGITREPOS}"
}

action_update() {
if [ -f "${MYGITREPOS}" ]
then
	declare -a GITDIRS
	while read LINE
	do
		if [   -z "${LINE}"      ] ; then continue ; fi
		if [ ! -d "${LINE}"      ] ; then continue ; fi
		if [ ! -d "${LINE}/.git" ] ; then continue ; fi
		GITDIRS=("${GITDIRS[@]}" "$LINE")
	done <"${MYGITREPOS}"

	for MGR in "${GITDIRS[@]}"
	do
		process_repro_update "${MGR}"
	done

        echo "********************************************************"

else
	echo "Error: cannot find \"${MYGITREPOS}\"!" >&2
	exit 1
fi
}

action_setup() {
local RF="$1"
local RU="$2"
local RX=$(echo "${RF}" | awk -F/ '{ print $NF }')
local RD=$(basename "${RX}" ".git")
local RP=$(pwd)
cat <<EOF
*** gitchecker setup:
***       fork: ${RF}
***   upstream: ${RU}
***       repo: ${RD}
***       path: ${RP}
EOF
echo -n "*** Cloning: "
RES=$(git clone "${RF}" "${RD}" 2>&1)
if [ "X$?" != "X0" ]
then
	echo "Error: clone!"
	exit 1
else
	echo "done."
fi
echo -n "*** Change directory: "
cd "${RD}"
if [ "X$?" != "X0" ]
then
	echo "Error: cd!"
	exit 1
else
	echo "done."
fi
echo -n "*** Adding upstream: "
RES=$(git remote add upstream "${RU}" 2>&1)
if [ "X$?" != "X0" ]
then
	echo    "Error: adding upstream!"
	echo -e "   =>\n${RES}"
	exit 1
else
	echo "done."
fi
echo -n "*** Adding path to config: "
RES=$( ( echo -n ";" && pwd ) >>"${MYGITREPOS}" )
if [ "X$?" != "X0" ]
then
	echo "Error: adding path to config!"
	exit 1
else
	echo "done."
fi
echo "*** Completed."
}

# === main entry point ================================================
case $1 in
add|a|setup|s)
	shift
	action_setup $*
	;;
edit)
	action_edit
	;;
update)
	shift
	action_update $*
	;;
help)
	action_usage
	action_help
	;;
*)
	action_usage
	exit 1
	;;
esac

exit 0

#
# end of file
#
