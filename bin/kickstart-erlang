#!/bin/bash
#######################################################################
#
# "kickstarting" an Erlang/OTP environment
#  - build-support
#  - kickstart-erlang
#
#######################################################################

SCRIPT_NAME=$(basename "$0")
#SCRIPT_PATH=$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)

TITLE="+++ ACTION:"
OPTERL="/opt/erlang/otp"
OPTELIXIR="/opt/erlang/elixir"
ERLLINK="${OPTERL}/active"
ELIXIRLINK="${OPTELIXIR}/active"

# gmp: needs base path!
# --with-gmp=/opt/gnu/gmp/6.0.0
GMPBASE="/opt/gnu/gmp/active"


action_usage() {
	cat <<EOF
usage: ${SCRIPT_NAME} [ ACTION ]
 actions:
   install ARCS DST             : install an Erlang/OTP source tarball
   git                          : install Erlang/OTP from git clone
   elixir-git                   : install Elixir from git clone
   git-recompile                : install Erlang/Elixir from git
   setup RELEASE BUILD [PATCH]  : install Erlang/OTP from source tarball
   check-dependencies           : install Ubuntu dependencies
   help                         : display help (very incomplete)
EOF
}

action_help() {
	cat <<EOF
--- git ---------------------------------------------------------------
Builds Erlang/OTP from a git repository.
--- setup -------------------------------------------------------------
Builds Erlang/OTP from an archive:
	\$ ${SCRIPT_NAME} setup RELEASE BUILD [PATCH]
		RELEASE	: is something like "R13" "R14" "R15" "R16" etc...
		BUILD	: is something like "A" "B01" "B02" "B03" etc...
		PATCH	: may be something like "1" "2" (optional!)
EOF
}

action_setup_common() {
	local PREFIX="$1"

	# get CPU count
	NUM_CPUS=$(cat /proc/cpuinfo | grep '^processor' | wc -l)
	case $NUM_CPUS in
	0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32)
		CPUSPLUS1=$((NUM_CPUS + 1))
		MAKEFLAGS="-j${CPUSPLUS1}"
		export MAKEFLAGS
		echo "*** MAKEFLAGS = $MAKEFLAGS"
		;;
	esac

	# Setting up enviroment variables
	echo "${TITLE} setting up environment"
	ERL_TOP=$(pwd)
	PATH="${PREFIX}/bin:${ERL_TOP}/bin:${PATH}"
	hash -r
	LANG="C"

	# Configure
	echo "${TITLE} configure"
	"./otp_build" save_bootstrap
	"./otp_build" autoconf
	#"./otp_build" configure --prefix="${PREFIX}" --with-gmp
	#"./otp_build" configure --prefix="${PREFIX}"
	"./otp_build" configure --prefix="${PREFIX}" --with-gmp="${GMPBASE}"
	# simple build
	for ACT in "all" "install"
	do
		echo "${TITLE} make ${ACT}"
		make ${ACT}
	done
	#
	make clean
	#
	hash -r
	"./otp_build" remove_prebuilt_files
	"./otp_build" autoconf
	#"./otp_build" configure --prefix="${PREFIX}" --with-gmp
	#"./otp_build" configure --prefix="${PREFIX}"
	"./otp_build" configure --prefix="${PREFIX}" --with-gmp="${GMPBASE}"
        # hack for R17B00 source tarball
        if [ ! -f "system/README" ]
        then
            touch "system/README"
        fi
	# full build
	for ACT in "all" "install" "docs" "install-docs"
	do
		echo "${TITLE} make ${ACT}"
		make ${ACT}
	done

	# Create a directory with shortcuts to all PDFs
	echo "${TITLE} link PDFs"
	cd "${PREFIX}"
	mkdir "pdf"
	cd "pdf"
	find "${PREFIX}/lib/erlang" -type f -name '*.pdf' -exec ln -sf "{}" \;

	# make life easier
	echo "${TITLE} setup link"
	if [ -n "${ERLLINK}" ]
	then
		if [ -h "${ERLLINK}" ]
		then
			rm -f "${ERLLINK}"
		fi
		ln -sf "${PREFIX}" "${ERLLINK}"
	fi
}

action_install() {
    local MY_ERL_ARC="$1"
    local MY_ERL_DST="$2"
    local MY_ERL_SRC=$(basename "${MY_ERL_ARC}" | awk -F'.tar' '{ print $1 }')
    cat <<EOF
***********************************************************************
* WARNING: This is a "work in progress" version!!!
* MY_ERL_ARC= $MY_ERL_ARC
* MY_ERL_DST= $MY_ERL_DST
* MY_ERL_SRC= $MY_ERL_SRC
***********************************************************************
EOF
    #exit 0
    # prepare build directory
    MY_ERL_DIR=$(mktemp -d --suffix="-erlang-otp")
    cd "${MY_ERL_DIR}"
    tar xf "${MY_ERL_ARC}"
    cd "${MY_ERL_SRC}"
    # run common setup
    action_setup_common "${MY_ERL_DST}"
}

action_setup_archive() {
	local ERL_RELEASE="$1"
	local ERL_BUILD="$2"
	local ERL_PATCH="$3"
	ERLSVER="${1}${2}"
	if [ -z "${ERLSVER}" ]
	then
		echo "Error: no Erlang/OPT version specified!" >&2
		exit 1
	else
		echo "About to build Erlang/OPT ${ERLSVER}..."
	fi
	# Some personal environment settings
	ERLARCS="${HOME}/arcs/erlang.org"
	ERLSBAS=$(mktemp -d --suffix="-erlang-otp")
	ERLSNAM="otp_src_${ERLSVER}"
	ERLSTPN=""
	for ARC in "xz" "bz2" "gz"
	do
		if [ -z "${ERL_PATCH}" ]
		then
			ERLSTARX="otp_src_${ERLSVER}.tar.${ARC}"
		else
			ERLSTARX="otp_src_${ERLSVER}-${ERL_PATCH}.tar.${ARC}"
		fi
		ERLSTPNX="${ERLARCS}/${ERLSTARX}"
		if [ ! -f "${ERLSTPNX}" ] ; then continue; fi
		ERLSTPN="${ERLSTPNX}"
		break
	done
	if [ -z "${ERLSTPN}" ]
	then
		echo "Error: can't access source tarball!" >&2
		exit 1
	fi
	PREFIX="${OPTERL}/${ERL_RELEASE}/${ERL_BUILD}"

	# Setup the source environment
	if [ ! -f "${ERLSTPN}" ]
	then
		echo "Error: can't access Erlang/OTP source archive: ${ERLSTPN}!" >&2
		exit 1
	fi

	echo "${TITLE} extracting Erlang/OTP sources"
	test ! -d "${ERLSBAS}" && mkdir -p "${ERLSBAS}"
	cd "${ERLSBAS}"
	tar xf "${ERLSTPN}"
	cd "${ERLSNAM}"

	action_setup_common "${PREFIX}"

	echo "${TITLE} cleanup"
	rm -rf "${ERLSBAS}"
}

action_setup_git() {
	BUILDTS=$(date --utc '+%Y%m%d/%H%M')
	PREFIX="${OPTERL}/git/${BUILDTS}"

	action_setup_common "${PREFIX}"
}

action_setup_elixir_git() {
	BUILDTS=$(date --utc '+%Y%m%d/%H%M')
	ELIXIRPREFIX="${OPTELIXIR}/git/${BUILDTS}"
	PREFIX="${ELIXIRPREFIX}" make "clean" "test" "install"
	if [ -h "${ELIXIRLINK}" -a -d "${ELIXIRPREFIX}" ] ; then
		rm "${ELIXIRLINK}"
	fi
	if [ -d "${ELIXIRPREFIX}" ] ; then
		ln -sf "${ELIXIRPREFIX}" "${ELIXIRLINK}"
	fi
}

action_check_dependencies() {
sudo apt-get install build-essential m4 libncurses5-dev libssh-dev libgmp-dev libwxgtk2.8-dev libglu1-mesa-dev
sudo apt-get install libglu1-mesa-dev
sudo apt-get install ncurses-doc libssh-doc wx2.8-doc libxcb-doc libxext-doc
sudo apt-get install default-jdk xsltproc fop

sudo apt-get install fop-doc libtool-doc

#sudo apt-get install fop-doc libservlet3.0-java equivs libavalon-framework-java-doc libbonobo2-bin
#sudo apt-get install bsh libcommons-io-java-doc libcommons-logging-java-doc libexcalibur-logkit-java
#sudo apt-get install liblog4j1.2-java desktop-base libice-doc libjaxp1.3-java-gcj libjline-java-doc
#sudo apt-get install libjdom1-java libsaxon-java-doc libsm-doc libxalan2-java-doc libxsltc-java libxerces2-java-doc
#sudo apt-get install libxerces2-java-gcj libxml-commons-resolver1.1-java-doc libxt-doc
#sudo apt-get install openjdk-7-demo openjdk-7-source visualvm icedtea-7-plugin
#sudo apt-get install sun-java6-fonts ttf-telugu-fonts ttf-oriya-fonts ttf-kannada-fonts ttf-bengali-fonts librhino-java-doc
#sudo apt-get install libtool-doc gfortran fortran95-compiler gcj

sudo apt-get install libxml2-utils
sudo apt-get install unixodbc-dev
}

action_git_recompile() {
	# ====================================================================
	# setup some things
	BUILDTS=$(date --utc '+%Y%m%d/%H%M')
	ERLANG_PREFIX="/opt/erlang/otp/git/${BUILDTS}"
	ELIXIR_PREFIX="/opt/erlang/elixir/git/${BUILDTS}"

	# ====================================================================
	# check environment
	if [ ! -d "/opt/erlang/git" ] ; then
		mkdir -p "/opt/erlang/git"
	fi
	pushd "/opt/erlang/git"

	# ====================================================================
	# Erlang/OTP
	#  https://github.com/erlang/otp.git
	#  maint
	if [ ! -d "otp" ] ; then
		git clone "https://github.com/erlang/otp.git" "otp"
	fi
	pushd "otp"
	git fetch "origin"
	git fetch "origin" --tags
	git checkout "maint"
	git pull "origin" "maint"
	git checkout -b "local-build"

	OLD_LANG=$LANG
	export LANG="C"
	export ERL_TOP=$(pwd)
	export MAKEFLAGS="-j9"

	nice ./otp_build setup -a --prefix="${ERLANG_PREFIX}"
	nice make install install-docs

	git add -A
	git commit -m 'local build'
	git checkout "maint"
	git branch "local-build" --delete

	export LANG="${OLD_LANG}"

	if [ -h "/opt/erlang/otp/active" ] ; then
		rm "/opt/erlang/otp/active"
	fi
	ln -sf "${ERLANG_PREFIX}" "/opt/erlang/otp/active"

	# cleanup Erlang/OTP
	popd

	# ====================================================================
	# Elixir
	#  https://github.com/elixir-lang/elixir.git
	#  master

	if [ ! -d "elixir" ] ; then
		git clone "https://github.com/elixir-lang/elixir.git" "elixir"
	fi

	pushd "elixir"

	git fetch "origin"
	git fetch "origin" --tags
	git checkout "master"
	git pull "origin" "master"
	git checkout -b "local-build"

	OLD_PATH=${PATH}
	export PATH="${ERLANG_PREFIX}/bin:${PATH}"
	for TASK in "clean" "compile" "test" "install" ; do
		PREFIX="${ELIXIR_PREFIX}" make "${TASK}"
	done
	export PATH=${OLD_PATH}

	git add -A
	git commit -m 'local build'
	git checkout "master"
	git branch "local-build" --delete

	if [ -h "/opt/erlang/elixir/active" ] ; then
		rm "/opt/erlang/elixir/active"
	fi
	ln -sf "${ELIXIR_PREFIX}" "/opt/erlang/elixir/active"

	popd

	# ====================================================================
	# ex_doc
	# TBD

	# ====================================================================
	# LFE
	#  https://github.com/rvirding/lfe.git
	#  develop

	if [ ! -d "lfe" ] ; then
		git clone "https://github.com/rvirding/lfe.git" "lfe"
	fi

	pushd "lfe"

	git fetch "origin"
	git fetch "origin" --tags
	git checkout "develop"
	git pull "origin" "develop"
	git checkout -b "local-build"

	OLD_PATH=${PATH}
	export PATH="${ERLANG_PREFIX}/bin:${PATH}"
	make compile
	make install
	export PATH=${OLD_PATH}

	git add -A
	git commit -m 'local build'
	git checkout "develop"
	git branch "local-build" --delete

	popd

	# ====================================================================
	# Phoenix
	#  https://github.com/phoenixframework/phoenix.git
	#  master

	if [ ! -d "phoenix" ] ; then
		git clone "https://github.com/phoenixframework/phoenix.git" "phoenix"
	fi

	pushd "phoenix"

	git fetch "origin"
	git fetch "origin" --tags
	git checkout "master"
	git pull "origin" "master"
	git checkout -b "local-build"

	OLD_PATH=${PATH}
	export PATH="${ELIXIR_PREFIX}/bin:${ERLANG_PREFIX}/bin:${PATH}"
	# actually nothing to do... right now...
	export PATH=${OLD_PATH}

	git add -A
	git commit -m 'local build'
	git checkout "master"
	git branch "local-build" --delete

	popd

	# ====================================================================
	# cleanup environment
	popd
}

case $1 in
	check-dependencies)
		action_check_dependencies
		;;
        install)
                shift
                action_install $*
                ;;
	git)
		action_setup_git
		;;
	elixir-git)
		action_setup_elixir_git
		;;
	git-recompile)
		shift
		action_git_recompile $*
		;;
	setup)
		shift
		action_setup_archive $*
		;;
	help)
		action_usage
		action_help
		;;
	*)
		action_usage
		exit 1
		;;
esac

exit 0

#######################################################################
#
# End Of File
#
#######################################################################
