#!/bin/bash
#######################################################################
#
# "kickstarting" an Erlang/OTP environment
#  - build-support
#  - kickstart-erlang
#
#######################################################################

SCRIPT_NAME=$(basename "$0")
#SCRIPT_PATH=$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)

TITLE="+++ ACTION:"
OPTERL="/opt/erlang/otp"
ERLLINK="${OPTERL}/active"


action_usage() {
	cat <<EOF
usage: ${SCRIPT_NAME} [ install ARCS DST | git | setup RELEASE BUILD [PATCH] | check-dependencies | help ]
EOF
}

action_help() {
	cat <<EOF
--- git ---------------------------------------------------------------
Builds Erlang/OTP from a git repository.
--- setup -------------------------------------------------------------
Builds Erlang/OTP from an archive:
	\$ ${SCRIPT_NAME} setup RELEASE BUILD [PATCH]
		RELEASE	: is something like "R13" "R14" "R15" "R16" etc...
		BUILD	: is something like "A" "B01" "B02" "B03" etc...
		PATCH	: may be something like "1" "2" (optional!)
EOF
}

action_setup_common() {
	local PREFIX="$1"

	# Setting up enviroment variables
	echo "${TITLE} setting up environment"
	ERL_TOP=$(pwd)
	PATH="${PREFIX}/bin:${ERL_TOP}/bin:${PATH}"
	hash -r
	LANG="C"

	# Configure
	echo "${TITLE} configure"
	"./otp_build" save_bootstrap
	"./otp_build" autoconf
	"./otp_build" configure --prefix="${PREFIX}" --with-gmp
	# simple build
	for ACT in "all" "install"
	do
		echo "${TITLE} make ${ACT}"
		make ${ACT}
	done
	#
	make clean
	#
	hash -r
	"./otp_build" remove_prebuilt_files
	"./otp_build" autoconf
	"./otp_build" configure --prefix="${PREFIX}" --with-gmp
        # hack for R17B00 source tarball
        if [ ! -f "system/README" ]
        then
            touch "system/README"
        fi
	# full build
	for ACT in "all" "install" "docs" "install-docs"
	do
		echo "${TITLE} make ${ACT}"
		make ${ACT}
	done

	# Create a directory with shortcuts to all PDFs
	echo "${TITLE} link PDFs"
	cd "${PREFIX}"
	mkdir "pdf"
	cd "pdf"
	find "${PREFIX}/lib/erlang" -type f -name '*.pdf' -exec ln -sf "{}" \;

	# make life easier
	echo "${TITLE} setup link"
	if [ -n "${ERLLINK}" ]
	then
		if [ -h "${ERLLINK}" ]
		then
			rm -f "${ERLLINK}"
		fi
		ln -sf "${PREFIX}" "${ERLLINK}"
	fi
}

action_install() {
    local MY_ERL_ARC="$1"
    local MY_ERL_DST="$2"
    local MY_ERL_SRC=$(basename "${MY_ERL_ARC}" | awk -F'.tar' '{ print $1 }')
    cat <<EOF
***********************************************************************
* WARNING: This is a "work in progress" version!!!
* MY_ERL_ARC= $MY_ERL_ARC
* MY_ERL_DST= $MY_ERL_DST
* MY_ERL_SRC= $MY_ERL_SRC
***********************************************************************
EOF
    #exit 0
    # prepare build directory
    MY_ERL_DIR=$(mktemp -d --suffix="-erlang-otp")
    cd "${MY_ERL_DIR}"
    tar xf "${MY_ERL_ARC}"
    cd "${MY_ERL_SRC}"
    # run common setup
    action_setup_common "${MY_ERL_DST}"
}

action_setup_archive() {
	local ERL_RELEASE="$1"
	local ERL_BUILD="$2"
	local ERL_PATCH="$3"
	ERLSVER="${1}${2}"
	if [ -z "${ERLSVER}" ]
	then
		echo "Error: no Erlang/OPT version specified!" >&2
		exit 1
	else
		echo "About to build Erlang/OPT ${ERLSVER}..."
	fi
	# Some personal environment settings
	ERLARCS="${HOME}/arcs/erlang.org"
	ERLSBAS=$(mktemp -d --suffix="-erlang-otp")
	ERLSNAM="otp_src_${ERLSVER}"
	ERLSTPN=""
	for ARC in "xz" "bz2" "gz"
	do
		if [ -z "${ERL_PATCH}" ]
		then
			ERLSTARX="otp_src_${ERLSVER}.tar.${ARC}"
		else
			ERLSTARX="otp_src_${ERLSVER}-${ERL_PATCH}.tar.${ARC}"
		fi
		ERLSTPNX="${ERLARCS}/${ERLSTARX}"
		if [ ! -f "${ERLSTPNX}" ] ; then continue; fi
		ERLSTPN="${ERLSTPNX}"
		break
	done
	if [ -z "${ERLSTPN}" ]
	then
		echo "Error: can't access source tarball!" >&2
		exit 1
	fi
	PREFIX="${OPTERL}/${ERL_RELEASE}/${ERL_BUILD}"

	# Setup the source environment
	if [ ! -f "${ERLSTPN}" ]
	then
		echo "Error: can't access Erlang/OTP source archive: ${ERLSTPN}!" >&2
		exit 1
	fi

	echo "${TITLE} extracting Erlang/OTP sources"
	test ! -d "${ERLSBAS}" && mkdir -p "${ERLSBAS}"
	cd "${ERLSBAS}"
	tar xf "${ERLSTPN}"
	cd "${ERLSNAM}"

	action_setup_common "${PREFIX}"

	echo "${TITLE} cleanup"
	rm -rf "${ERLSBAS}"
}

action_setup_git() {
	BUILDTS=$(date --utc '+%Y%m%d-%H%M')
	PREFIX="${OPTERL}/git/${BUILDTS}"

	action_setup_common "${PREFIX}"
}

action_check_dependencies() {
sudo apt-get install build-essential m4 libncurses5-dev libssh-dev libgmp-dev libwxgtk2.8-dev libglu1-mesa-dev
sudo apt-get install libglu1-mesa-dev
sudo apt-get install ncurses-doc libssh-doc wx2.8-doc libxcb-doc libxext-doc
sudo apt-get install default-jdk xsltproc fop

sudo apt-get install fop-doc libtool-doc

#sudo apt-get install fop-doc libservlet3.0-java equivs libavalon-framework-java-doc libbonobo2-bin
#sudo apt-get install bsh libcommons-io-java-doc libcommons-logging-java-doc libexcalibur-logkit-java
#sudo apt-get install liblog4j1.2-java desktop-base libice-doc libjaxp1.3-java-gcj libjline-java-doc
#sudo apt-get install libjdom1-java libsaxon-java-doc libsm-doc libxalan2-java-doc libxsltc-java libxerces2-java-doc
#sudo apt-get install libxerces2-java-gcj libxml-commons-resolver1.1-java-doc libxt-doc
#sudo apt-get install openjdk-7-demo openjdk-7-source visualvm icedtea-7-plugin
#sudo apt-get install sun-java6-fonts ttf-telugu-fonts ttf-oriya-fonts ttf-kannada-fonts ttf-bengali-fonts librhino-java-doc
#sudo apt-get install libtool-doc gfortran fortran95-compiler gcj

sudo apt-get install libxml2-utils
sudo apt-get install unixodbc-dev
}

case $1 in
	check-dependencies)
		action_check_dependencies
		;;
        install)
                shift
                action_install $*
                ;;
	git)
		action_setup_git
		;;
	setup)
		shift
		action_setup_archive $*
		;;
	help)
		action_usage
		action_help
		;;
	*)
		action_usage
		exit 1
		;;
esac

exit 0

#######################################################################
#
# End Of File
#
#######################################################################
