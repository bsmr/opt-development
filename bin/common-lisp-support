#!/bin/bash

DLBASE="/home/bm/downloads"
GNUDLBASE="${DLBASE}/gnu.org"
SBCLDLBASE="${DLBASE}/sbcl.org"

action_download_emacs() {
	if [ ! -d "$GNUDLBASE" ] ; then mkdir -p "$GNUDLBASE" ; fi
	cd "$GNUDLBASE"
	wget -4 -nc "ftp://ftp.gnu.org/gnu/emacs/emacs-24.1.tar.bz2"
}

action_download_sbcl() {
	if [ ! -d "$SBCLDLBASE" ] ; then mkdir -p "$SBCLDLBASE" ; fi
	cd "$SBCLDLBASE"
	for F in 						\
		"sbcl-1.0.57-source.tar.bz2"			\
		"sbcl-1.0.57-x86-64-linux-binary.tar.bz2"	\
		"sbcl-1.0.57-x86-linux-binary.tar.bz2"		\
		""
	do
		if [ -z "$F" ] ; then continue ; fi
		DL="http://downloads.sourceforge.net/project/sbcl/sbcl/1.0.57/${F}"
		wget -4 -nc "${DL}"
	done
}

action_install_bin_sbcl() {
	SBCLBINARC=""
	SBCLBINDIR=""
	case $(uname -m) in
	x86_64)
		SBCLBINARC="sbcl-1.0.57-x86-64-linux-binary.tar.bz2"
		SBCLBINDIR="sbcl-1.0.57-x86-64-linux"
		;;
	x86)
		SBCLBINARC="sbcl-1.0.57-x86-linux-binary.tar.bz2"
		SBCLBINDIR="sbcl-1.0.57-x86-linux"
		;;
	esac
	if [ -z "$SBCLBINARC" ]
	then
		echo "Error: failed to assign SBCL binary archive!"
		exit 1
	fi
	SBCLBINDLPATH="${SBCLDLBASE}/${SBCLBINARC}"
	if [ ! -f "${SBCLBINDLPATH}" ]
	then
		echo "Error: can't access file \"${SBCLBINDLPATH}\"!"
		exit 1
	fi
	# create target install temp directory
	# change into target install temp directory
	# setup install environment
	LANG="C"
	INSTALL_ROOT="/opt/lisp/sbcl/1.0.57" sh install.sh
	# setup link
	ln -sf "/opt/lisp/sbcl/1.0.57" "/opt/lisp/sbcl/active"
	# cleanup/remove bin directory
}

action_install_sbcl_from_source() {
	# extract source to install directory
	#tar xf ~/downloads/sbcl.org/sbcl-1.0.57-source.tar.bz2
	cd "/home/bm/install/sbcl-1.0.57"
	export LANG="C"
	export SBCL_BASE="/opt/lisp/sbcl/active"
	export SBCL_HOME="/opt/lisp/sbcl/active/lib/sbcl"
	export PATH="${SBCL_BASE}/bin:$PATH"
	sh make.sh --fancy --prefix="/opt/lisp/sbcl/1.0.57"	2>&1 | tee "log-1-build.txt"
	(cd tests && sh run-tests.sh)				2>&1 | tee "log-2-tests.txt"
	(cd doc/manual && make)					2>&1 | tee "log-3-manuals.txt"
	unset INSTALL_ROOT
	unset SBCL_HOME
	sh install.sh						2>&1 | tee "log-4-install.txt"
	#
	# cleanup
	cd ..
	rm -rf sbcl-1.0.57/
	# 2nd pass
	tar xf "~/downloads/sbcl.org/sbcl-1.0.57-source.tar.bz2"
	cd "sbcl-1.0.57"
	export LANG="C"
	export SBCL_BASE="/opt/lisp/sbcl/active"
	export PATH="${SBCL_BASE}/bin:$PATH"
	sh make.sh --fancy --prefix="/opt/lisp/sbcl/1.0.57"	2>&1 | tee "log-1-build.txt"
	(cd tests && sh run-tests.sh)				2>&1 | tee "log-2-tests.txt"
	(cd doc/manual && make)					2>&1 | tee "log-3-manuals.txt"
	sh install.sh						2>&1 | tee "log-4-install.txt"
	# keep logs / cleanup
}

action_install_sbcl_from_git() {
	TMPBASE=$(mktemp -d --suffix='-sbcl-install')
	TS=$(date --utc '+%Y%m%d-%H%M%S')
	OLD_PATH="$PATH"
	export LANG="C"
	SBD="/opt/lisp/sbcl"
	SGA="${SBD}/active"
	SGV="${SBD}/git/${TS}"
	if [ ! -d "${SGV}" ] ; then mkdir -p "${SGV}" ; fi
	cd "${TMPBASE}"
	# pass 1
	git clone https://github.com/sbcl/sbcl.git
	cd "sbcl"
	export SBCL_BASE="${SGA}"
	export PATH="${SBCL_BASE}/bin:$OLD_PATH"
	sh make.sh --fancy --prefix="${SGV}"	#2>&1 | tee "log-1-build.txt"
	(cd tests && sh run-tests.sh)		#2>&1 | tee "log-2-tests.txt"
	(cd doc/manual && make)			#2>&1 | tee "log-3-manuals.txt"
	sh install.sh				#2>&1 | tee "log-4-install.txt"
	cd ..
	rm -rf "sbcl"
	# pass 2
	git clone https://github.com/sbcl/sbcl.git
	cd "sbcl"
	export SBCL_BASE="${SGV}"
	export PATH="${SBCL_BASE}/bin:$OLD_PATH"
	sh make.sh --fancy --prefix="${SGV}"	#2>&1 | tee "log-1-build.txt"
	(cd tests && sh run-tests.sh)		#2>&1 | tee "log-2-tests.txt"
	(cd doc/manual && make)			#2>&1 | tee "log-3-manuals.txt"
	sh install.sh				#2>&1 | tee "log-4-install.txt"
	cd ..
	rm -rf "sbcl"
	# cleanup
	cd /tmp
	rm -rf "${TMPBASE}"
	PATH="$OLD_PATH"
	export PATH
	cat <<EOF
#######################################################################
#
#	Don't forget to issue the following command:
#	> cd "${SBD}" && rm active && ln -sf "git/${TS}" active
#
#######################################################################
EOF
}

action_sbcl_generate_slime_core() {
	SBD="/opt/lisp/sbcl"
	OLD_PATH="$PATH"
	PATH="${SBD}/active/bin:${PATH}"
	cd "${SBD}/slime"
	sbcl --no-sysinit --no-userinit --load /opt/development/etc/sbcl-swank-core.lisp
}

action_install_slime() {
	cd "/opt/lisp"
	cvs -d :pserver:anonymous:anonymous@common-lisp.net:/project/slime/cvsroot co slime
}

action_install_emacs() {
	#
	DL="~/downloads/gnu.org"
	EV="24.1"
	#
	#sudo aptitude install libgtk-3-dev libxaw7-dev libjpeg-dev libgif-dev libtiff4-dev
	#sudo aptitude install libotf-dev libm17n-dev libxml2-dev libgpm-dev libdbus-1-dev librsvg2-dev imagemagick libgconf2-dev
	#
	tar xf "${DL}/emacs-${EV}.tar.bz2"
	mkdir "emacs-${EV}-build"
	cd "emacs-${EV}-build"
	export LANG="C"
	../emacs-${EV}/configure --prefix=/opt/emacs/${EV}	#2>&1 | tee "log-1-configure.txt"
	make -j8 all						#2>&1 | tee "log-2-build.txt"
	make install						#2>&1 | tee "log-3-install.txt"
	cd ..
	rm -rf "emacs-${EV}*"
	echo '*** => ln -sf "/opt/emacs/${EV}" "/opt/emacs/active"'
}

action_sbcl_src_install() {
echo "Installing SBCL from source"
OLD_LANG=$LANG
export LANG="C"
OLD_PATH=$PATH
export PATH="/opt/lisp/sbcl/active/bin:$PATH"
cd "/home/family/bsmr/source/install/lisp"
tar xvf "/home/family/bsmr/Downloads/sbcl.org/sbcl-1.0.58-source.tar.bz2"
cd sbcl-1.0.58
sh make.sh --fancy --prefix="/opt/lisp/sbcl/1.0.58"
(cd tests && sh run-tests.sh)
(cd doc/manual && make)
sh install.sh
cd ..
rm -rf "sbcl-1.0.58"
PATH=$OLD_PATH
LANG=$OLD_LANG
export PATH
export LANG
}

action_usage() {
cat <<EOF
usage: `basename $0` [sbcl-src-install|sbcl-git-install|sbcl-slime-core|help]
EOF
}

action_help() {
	action_usage
cat <<EOF
	sbcl-src-install [ssi]: install sbcl from source
	sbcl-git-install [sgi]: install sbcl from git repository
	sbcl-slime-core  [ssc]: generate a core for fow sbcl-slime
EOF
}

case $1 in
sbcl-src-install|ssi)
	action_sbcl_src_install
;;
sbcl-git-install|sgi)
	action_install_sbcl_from_git
;;
sbcl-slime-core|ssc)
	action_sbcl_generate_slime_core
;;
help)
	action_help
;;
*)
	action_usage
	exit 1
;;
esac

exit 0

#
# End Of File
#
